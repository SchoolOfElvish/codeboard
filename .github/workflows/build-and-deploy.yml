on:
  workflow_call:
    inputs:
      environment:
        description: "The environment to get variables from"
        required: true
        type: string
      version:
        description: "The version to use for the build"
        required: true
        type: string
    secrets:
      vps-password:
        description: "Password of user from VPS server"
        required: true
      vps-user:
        description: "Username from VPS server"
        required: true

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build-frontend:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ vars.FRONTEND_IMAGE_REPOSITORY }}:${{ inputs.version }}, ${{ vars.FRONTEND_IMAGE_REPOSITORY }}:latest
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
      - name: Fetch secrets from tawbar
        run: |
          curl https://api.tawbar.com/projects/v1/${{ secrets.TAWBAR_FRONTEND_PROJECT_ID }}/production -H 'Authorization: ${{ secrets.TAWBAR_FRONTEND_API_KEY }}' -o ./frontend/.env
          curl https://api.tawbar.com/projects/v1/${{ secrets.TAWBAR_BACKEND_PROJECT_ID }}/production -H 'Authorization: ${{ secrets.TAWBAR_BACKEND_API_KEY }}' -o ./backend/.env
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: docker/production/frontend.Dockerfile
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PUBLIC_BACKEND_URL_CLIENT=${{vars.PUBLIC_BACKEND_URL_CLIENT}}
            PUBLIC_BACKEND_URL_SSR=${{vars.PUBLIC_BACKEND_URL_SSR}}

  build-backend:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ vars.BACKEND_IMAGE_REPOSITORY }}:${{ inputs.version }}, ${{ vars.BACKEND_IMAGE_REPOSITORY }}:latest
    outputs:
      image-tag: ${{ env.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
      - name: Fetch secrets from tawbar
        run: |
          curl https://api.tawbar.com/projects/v1/${{ secrets.TAWBAR_FRONTEND_PROJECT_ID }}/production -H 'Authorization: ${{ secrets.TAWBAR_FRONTEND_API_KEY }}' -o ./frontend/.env
          curl https://api.tawbar.com/projects/v1/${{ secrets.TAWBAR_BACKEND_PROJECT_ID }}/production -H 'Authorization: ${{ secrets.TAWBAR_BACKEND_API_KEY }}' -o ./backend/.env
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: docker/production/backend.Dockerfile
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build-frontend, build-backend]
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: SSH into production VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.VPS_HOST }}
          username: ${{ secrets.vps-user }}
          password: ${{ secrets.vps-password }}
          script: |
            cd ~/SchoolOfElvish/codeboard
            docker login https://ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            docker compose -f production.yml pull
            docker compose -f production.yml up -d
